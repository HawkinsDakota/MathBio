% This file solves the diffusion equationcleartime=cputime;%moviename = ['MOVIE.qt']%MakeQTMovie('start', moviename)%Create initial conditions based off trajectory of u(x) - > 0%as x -> +/- infinity[x,u] = ode45(@Prob1, [0,30], 0.152147, [], 0.10);u = real(u); %sometimes we get imaginary parts.uScale = 0.5; %Scaling factor for changing initial conditions.xNeg = -1*flip(x);uRev = flip(u);xTot = [xNeg; x];uTot = [uRev ; u]*uScale;L = 1000; % length of the domaind = 5; % diffusion coefficientN=size(xTot, 1);                   % number of spatial grid pointsM = 130;h = L/N;%We now estimate 'dt' from the ode23 by taking total 'time' %solved for (30*2) and dividing by the size of our x array.dt = 60/N; K = 0.01;vel = 0.1; % set this to zero to have no transportvel = 0;sc = 100;scal = d*dt/h^2;%X = h*(1:N)';X = xTot; %easy reassignment to make the least number of changes to code% V = zeros(N,1);V = uTot; %again, easy eassignment.%used to make sure initial conditions aligned%plot(X,V);%alpha vector for bistable equationalpha = 0.1*ones(N,1);%ones vector for bistable equationoneVec = ones(N,1); %Initial conditions vector replaces% V(N/2) = 1;  %Variables for Prob2Cm = 20*oneVec;gCa = 4.4*oneVec;gL = 2*oneVec;V1 = -1.2*oneVec;V3 = 2*oneVec;VCa = 120*oneVec;VL = -60*oneVec;Iapp = 0.06*oneVec;gK = 8*oneVec;phi = 0.04*oneVec;V2 = 18*oneVec;V4 = 30*oneVec;Vk = -84*oneVec; kstep = 1;t=0;% uses Crank Nicolson to solve the diffusion equation% set up matrixAtm=(1+scal)*ones(N,1);Atm(1,1) = 1+scal/2;Atm(N,1) = 1+scal/2;Am=diag(Atm)-diag(scal/2*ones(N-1,1),1)-diag(scal/2*ones(N-1,1),-1);% The algorithm for n=2:Mfor k = 1:kstep F = vel*(V -  [V(1 );V(1:N-1 )]); V_t =  scal/2 * ([V(2:N );V(N )] - 2*V + [V(1 );V(1:N-1 )])+dt*V.*(V-alpha).*(oneVec-V) ; %V_t =  scal/2 * ([V(2:N );0] - 2*V + [0;V(1:N-1 )])   ; Dirichlet%conditionsV = Am\(V+V_t);%%Euler step for second degree system in problem 2%%W = W + dt*phi*cosh((V - V3)/(2*V4)).*(Winf(V) - W)% t=t + dt;endfigure(1)  plot(X,V )  axis([-30 30  0 1.5]) % axis([0 L -.5 1])%MakeQTMovie('addframe','moviename')%MakeQTMovie('quality', 1.0)  pause(0.05)end%MakeQTMovie('finish','moviename')  TL = t;time=cputime-time        % outputs the cpu time taken to solve the equationstime_steps = M;