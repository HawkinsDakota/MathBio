% This file solves the diffusion equationcleartime=cputime;%moviename = ['MOVIE.qt']%MakeQTMovie('start', moviename)L = 1000; % length of the domaind = 16; % diffusion coefficientN=50;                   % number of spatial grid pointsM = 130;h = L/N;dt = 0.01; %small for eulerK = 0.01;vel = 0.1; % set this to zero to have no transportvel = 0;sc = 100;scal = d*dt/h^2;%ones vector for bistable equationoneVec = ones(N,1);%initialize X,V, and W vectors X = h*(1:N)'; V = zeros(N,1); W = zeros(N,1);%Initial conditions V(N/2) = -86; W(N/2) = -0.5;  %Variables for Prob2Cm = 20;gCa = 4.4;gL = 2;V1 = -1.2*oneVec;V3 = 2*oneVec;VCa = 120*oneVec;VL = -60*oneVec;Iapp = 0.06*oneVec;gK = 8;phi = 0.04;V2 = 18;V4 = 30;VK = -84*oneVec; kstep = 25;t=0;% uses Crank Nicolson to solve the diffusion equation% set up matrixAtm=(1+scal)*ones(N,1);Atm(1,1) = 1+scal/2;Atm(N,1) = 1+scal/2;Am=diag(Atm)-diag(scal/2*ones(N-1,1),1)-diag(scal/2*ones(N-1,1),-1);% The algorithm for n=2:Mfor k = 1:kstep F = vel*(V -  [V(1 );V(1:N-1 )]);%Crank Nicholson + Euler for VV_t =  scal/(2*Cm) * ([V(2:N );V(N )] - 2*V + [V(1 );V(1:N-1 )])-dt/Cm*(gCa*(1/2*(1+tanh((V-V1)/V2))).*(V - VCa)+ gK*W.*(V-VK)+ gL*(V-VL) + Iapp);%Euler step for W%W = W + dt*phi*cosh((V - V3)/(2*V4)).*(1/2*(1+tanh((V-V3)/V4)) - W);% %V_t =  scal/2 * ([V(2:N );0] - 2*V + [0;V(1:N-1 )])   ; Dirichlet%conditionsV = Am\(V+V_t); %+ dt/Cm*Iapp;% t=t + dt;endfigure(1)  % plot(X,W)  %axis([0 1000  0 1])  %hold on;    %plot(W,V);  %axis([0 1 -80 60]);  %hold on;    plot(X,V);   axis([0 1000 -80 60]);  hold on;%MakeQTMovie('addframe','moviename')%MakeQTMovie('quality', 1.0)  pause(0.05)end%MakeQTMovie('finish','moviename')  TL = t;time=cputime-time;        % outputs the cpu time taken to solve the equationstime_steps = M;