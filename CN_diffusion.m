% This file solves the diffusion equationcleartime=cputime;moviename = ['MOVIE.qt']%MakeQTMovie('start', moviename)L = 2; % length of the domaind = .01; % diffusion coefficientN=50;                   % number of spatial grid pointsM = 130;h = L/N;dt = h/2;K = 0.01;vel = 0.1; % set this to zero to have no transportvel = 0;sc = 100;scal = d*dt/h^2;X = h*(1:N)' - 1; V = zeros(N,1);  V(N/2) = 1;  kstep = 200;t=0;% uses Crank Nicolson to solve the diffusion equation% set up matrixAtm=(1+scal)*ones(N,1);Atm(1,1) = 1+scal/2;Atm(N,1) = 1+scal/2;Am=diag(Atm)-diag(scal/2*ones(N-1,1),1)-diag(scal/2*ones(N-1,1),-1);% The algorithm for n=2:Mfor k = 1:kstep F = vel*(V -  [V(1 );V(1:N-1 )]); V_t =  scal/2 * ([V(2:N );V(N )] - 2*V + [V(1 );V(1:N-1 )])-dt*F/h ; %V_t =  scal/2 * ([V(2:N );0] - 2*V + [0;V(1:N-1 )])   ; Dirichlet%conditionsV = Am\(V+V_t); t=t + dtendfigure(1)  plot(X,V )  axis([-1 1  0 1]) % axis([0 L -.5 1])%MakeQTMovie('addframe','moviename')%MakeQTMovie('quality', 1.0)  pause(0.05)end%MakeQTMovie('finish','moviename')  TL = t;%time=cputime-time        % outputs the cpu time taken to solve the equationstime_steps = M;